<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="e14d2940-907e-4c84-bd82-7a585cca71b2" activeEnvironment="Default" name="AppraisalService" resourceRoot="${projectDir}" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" id="d0242dfd-c18d-4f8c-9344-99fdbb8dccb9" wsaVersion="NONE" name="AppraisalServiceSoapBinding" type="wsdl" bindingName="{http://camel.apache.org/examples}AppraisalServiceSoapBinding" soapVersion="1_1" anonymous="optional" definition="http://localhost:8080/AppraisalService?wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="http://localhost:8080/AppraisalService?wsdl"><con:part><con:url>http://localhost:8080/AppraisalService?wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="AppraisalService" targetNamespace="http://camel.apache.org/examples" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:tns="http://camel.apache.org/examples" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:ns1="http://schemas.xmlsoap.org/soap/http">
  <wsdl:types>
    <xs:schema elementFormDefault="unqualified" targetNamespace="http://camel.apache.org/examples" version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema">
      <xs:element name="appraise" type="tns:appraise"/>
      <xs:element name="appraiseResponse" type="tns:appraiseResponse"/>
      <xs:complexType name="appraise">
        <xs:sequence>
          <xs:element minOccurs="0" name="address" type="xs:string"/>
        </xs:sequence>
      </xs:complexType>
      <xs:complexType name="appraiseResponse">
        <xs:sequence>
          <xs:element minOccurs="0" name="appraisal" type="xs:double"/>
        </xs:sequence>
      </xs:complexType>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="appraise">
    <wsdl:part element="tns:appraise" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:message name="appraiseResponse">
    <wsdl:part element="tns:appraiseResponse" name="parameters"></wsdl:part>
  </wsdl:message>
  <wsdl:portType name="AppraisalService">
    <wsdl:operation name="appraise">
      <wsdl:input message="tns:appraise" name="appraise"></wsdl:input>
      <wsdl:output message="tns:appraiseResponse" name="appraiseResponse"></wsdl:output>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="AppraisalServiceSoapBinding" type="tns:AppraisalService">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="appraise">
      <soap:operation soapAction="" style="document"/>
      <wsdl:input name="appraise">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="appraiseResponse">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="AppraisalService">
    <wsdl:port binding="tns:AppraisalServiceSoapBinding" name="AppraisalServiceSoapBinding">
      <soap:address location="http://donkey.local:8080/AppraisalService"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://donkey.local:8080/AppraisalService</con:endpoint></con:endpoints><con:operation id="44891e0f-7db0-4f83-bbc8-5058505e7e10" isOneWay="false" action="" name="appraise" bindingOperationName="appraise" type="Request-Response" outputName="appraiseResponse" inputName="appraise" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="609a1e2b-983c-43e6-83c2-420849abb8a3" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://donkey.local:8080/AppraisalService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:exam="http://camel.apache.org/examples">
   <soapenv:Header/>
   <soapenv:Body>
      <exam:appraise>
         <address>12345 Some St, Anytown, ST 11111</address>
      </exam:appraise>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://camel.apache.org/examples/AppraisalService/appraise"/><con:wsrmConfig version="1.2"/></con:call><con:call id="d74a8526-4e62-4063-8cf8-e7f7fd910547" name="Request 2"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://donkey.local:8080/AppraisalService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:exam="http://camel.apache.org/examples">
   <soapenv:Header/>
   <soapenv:Body>
      <exam:appraise>
         <address>129 West 81st St, 5B, New York, NY 10024</address>
      </exam:appraise>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://camel.apache.org/examples/AppraisalService/appraise"/><con:wsrmConfig version="1.2"/></con:call><con:call id="5d9a8dd1-8160-4cd6-ae42-b137d3e1237d" name="Request 3"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://donkey.local:8080/AppraisalService</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:exam="http://camel.apache.org/examples">
   <soapenv:Header/>
   <soapenv:Body>
      <exam:appraise>
         <address>1344 Queens Blvd, Queens, NY 11101</address>
      </exam:appraise>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://camel.apache.org/examples/AppraisalService/appraise"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:restMockService id="e3ed5655-4c7b-457a-ac6a-5d2b3af15149" port="7000" path="/" host="localhost" name="Audit Service Mock" docroot=""><con:settings/><con:properties/><con:onRequestScript>log.info(mockRequest.getRequestContent())</con:onRequestScript><con:restMockAction name="/audit" method="POST" resourcePath="/audit" id="6d325d8c-c9c6-4e32-889e-5a2acdcf4005"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="ea18eb45-be25-4f98-a7fa-4206570c54a4" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent/></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>